
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

ext {
    ossrhUsername = project.findProperty('ossrhUsername')
    ossrhPassword = project.findProperty('ossrhPassword')

    pgVersion = project.findProperty('pgVersion') ?: ("${project.version}" - '-SNAPSHOT')
    pgBinVersion = project.findProperty('pgBinVersion') ?: "${pgVersion}-1"
    archName = project.findProperty('archName') ?: 'amd64'
    distName = project.findProperty('distName') ?: ''
    dockerImage = project.findProperty('dockerImage') ?: ''

    normArchName = normalizeArchName("$archName")
}

group 'io.zonky.test.postgres'

sourceCompatibility = 1.6

repositories {
    jcenter()
    mavenCentral()
}

task validateInputs {
    doFirst {
        println "version:       ${project.version}"
        println "pgVersion:     $pgVersion"
        println "pgBinVersion:  $pgBinVersion"
        println "archName:      $archName"
        println "normArchName:  $normArchName"

        if (distName) {
            println "distName:      $distName"
        }
        if (dockerImage) {
            println "dockerImage:   $dockerImage"
        }

        if (!project.version || project.version == 'unspecified') {
            throw new GradleException("The 'version' property must be set")
        }
        if (distName && distName != 'alpine' && distName != 'ubuntu') {
            throw new GradleException("Currently only the 'alpine' and 'ubuntu' distributions are supported")
        }
        if (!(archName ==~ /^[a-z0-9]+$/)) {
            throw new GradleException("The 'archName' property must contain only alphanumeric characters")
        }
    }
}

task generateStandardPostgresBundles(type: Exec, dependsOn: validateInputs) {
    inputs.property('pgBinVersion', pgVersion)

    inputs.file('repack-postgres.sh')
    outputs.dir("$buildDir/resources/main")

    commandLine 'sh', './repack-postgres.sh', "$pgBinVersion"
}

task generateAlpinePostgresBundle(type: Exec, dependsOn: validateInputs) {
    inputs.property('pgVersion', pgVersion)
    inputs.property('archName', archName)
    inputs.property('dockerImage', dockerImage)

    inputs.file('repack-postgres-alpine.sh')
    outputs.dir("$buildDir/resources/main")

    commandLine 'sh', './repack-postgres-alpine.sh', "$pgVersion", "$archName", "$dockerImage"
}

task generateUbuntuPostgresBundle(type: Exec, dependsOn: validateInputs) {
    inputs.property('pgVersion', pgVersion)
    inputs.property('archName', archName)
    inputs.property('dockerImage', dockerImage)

    inputs.file('repack-postgres-ubuntu.sh')
    outputs.dir("$buildDir/resources/main")

    commandLine 'sh', './repack-postgres-ubuntu.sh', "$pgVersion", "$archName", "$dockerImage"
}

task windowsJar(type: Jar, dependsOn: generateStandardPostgresBundles) {
    enabled = !distName && archName == 'amd64' && !dockerImage
    from sourceSets.main.output
    include 'postgres-windows-x86_64.txz'
    appendix = 'windows'
}

task darwinJar(type: Jar, dependsOn: generateStandardPostgresBundles) {
    enabled = !distName && archName == 'amd64' && !dockerImage
    from sourceSets.main.output
    include 'postgres-darwin-x86_64.txz'
    appendix = 'darwin'
}

task linuxJar(type: Jar, dependsOn: generateStandardPostgresBundles) {
    enabled = !distName && archName == 'amd64' && !dockerImage
    from sourceSets.main.output
    include 'postgres-linux-x86_64.txz'
    appendix = 'linux'
}

task alpineJar(type: Jar, dependsOn: generateAlpinePostgresBundle) {
    enabled = distName == 'alpine' || (!distName && archName == 'amd64' && !dockerImage)
    from sourceSets.main.output

    include "postgres-linux-${archName}-alpine_linux.txz"
    rename "postgres-linux-${archName}-alpine_linux.txz", "postgres-linux-${normArchName}-alpine_linux.txz"

    appendix = "linux${archName != 'amd64' ? '-' + archName : ''}-alpine"
}

task ubuntuJar(type: Jar, dependsOn: generateUbuntuPostgresBundle) {
    enabled = distName == 'ubuntu' || (!distName && (archName != 'amd64' || dockerImage))
    from sourceSets.main.output

    include "postgres-linux-${archName}-ubuntu.txz"

    if (!distName) {
        rename "postgres-linux-${archName}-ubuntu.txz", "postgres-linux-${normArchName}.txz"
        appendix = "linux${archName != 'amd64' ? '-' + archName : ''}"
    } else {
        rename "postgres-linux-${archName}-ubuntu.txz", "postgres-linux-${normArchName}-ubuntu.txz"
        appendix = "linux${archName != 'amd64' ? '-' + archName : ''}-ubuntu"
    }
}

jar {
    enabled = false
}

configurations {
    bundles
}

artifacts {
    bundles windowsJar, darwinJar, linuxJar, alpineJar, ubuntuJar
    archives configurations.bundles.artifacts
}

[configurations.bundles, configurations.archives]*.with {
    artifacts.removeAll artifacts.findAll { !it.archiveTask.enabled }
}

signing {
    required { project.hasProperty('signing.keyId') }
    sign configurations.archives
}

task signBomPom(type: Sign, group: 'signing') {
    sign project.file("$buildDir/publications/bom/pom-default.xml")
    outputs.upToDateWhen { false }
}

configurations.bundles.artifacts.all { archive ->
    def publicationName = archive.archiveTask.name - 'Jar'
    task "sign${publicationName.capitalize()}Pom"(type: Sign, group: 'signing') {
        sign project.file("$buildDir/publications/${publicationName}/pom-default.xml")
        outputs.upToDateWhen { false }
    }
}

tasks.whenTaskAdded { task ->
    def matcher = task.name =~ /^generatePomFileFor(\w+)Publication$/
    if (matcher.matches()) {
        def signPom = tasks.findByName("sign${matcher[0][1]}Pom")
        if (signPom) {
            signPom.dependsOn task
        }
    }
}

tasks.whenTaskAdded { task ->
    def matcher = task.name =~ /^publish(\w+)PublicationTo.*$/
    if (matcher.matches()) {
        def signPom = tasks.findByName("sign${matcher[0][1]}Pom")
        if (signPom) {
            task.dependsOn signPom
        }
        task.dependsOn signArchives
    }
}

publishing {
    publications {
        configurations.bundles.artifacts.all { archive ->
            def publicationName = archive.archiveTask.name - 'Jar'
            "$publicationName"(MavenPublication) {
                artifactId "${archive.name}"
                artifact archive
                configurePom(pom, 'A lightweight bundle of PostgreSQL database with reduced size')

                pom.withXml {
                    def root = asNode()
                    root.get('packaging').first().value = 'jar'
                }

                signing.required && project.tasks.withType(Sign) {
                    signatures.findAll { it.getToSignArtifact()?.name == "${archive.name}" || it.file.path.startsWith("$buildDir/publications/$publicationName") }.each {
                        artifact source: it.file, classifier: it.classifier ?: null, extension: it.type == 'xml.asc' ? 'pom.asc' : it.type
                    }
                }
            }
        }
        if (configurations.bundles.artifacts.size() > 1) {
            bom(MavenPublication) {
                artifactId 'embedded-postgres-binaries-bom'
                configurePom(pom, 'Bill of Materials')

                pom.withXml {
                    def root = asNode()
                    root.get('packaging').first().value = 'pom'
                    root.children().last() + {
                        resolveStrategy = Closure.DELEGATE_FIRST

                        dependencyManagement {
                            dependencies {
                                configurations.bundles.artifacts.all { archive ->
                                    dependency {
                                        groupId "${project.group}"
                                        artifactId "${archive.name}"
                                        version "${project.version}"
                                    }
                                }
                            }
                        }
                    }
                }

                signing.required && project.tasks.getByName('signBomPom') {
                    signatures.all {
                        artifact source: it.file, classifier: it.classifier ?: null, extension: it.type == 'xml.asc' ? 'pom.asc' : it.type
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (!project.version.endsWith('-SNAPSHOT')) {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            } else {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
            }
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

task install(group: 'publishing') {
    configurations.bundles.artifacts.all { archive ->
        def publicationName = archive.archiveTask.name - 'Jar'
        dependsOn "publish${publicationName.capitalize()}PublicationToMavenLocal"
    }
}

task uploadArchives(group: 'publishing') {
    configurations.bundles.artifacts.all { archive ->
        def publicationName = archive.archiveTask.name - 'Jar'
        dependsOn "publish${publicationName.capitalize()}PublicationToMavenRepository"
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'generatePomFileForBomPublication') {
        install.dependsOn 'publishBomPublicationToMavenLocal'
        uploadArchives.dependsOn 'publishBomPublicationToMavenRepository'
    }
}

def configurePom(pom, desc) {
    pom.withXml {
        def root = asNode()

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description desc
            url 'https://github.com/zonkyio/embedded-postgres-binaries'

            scm {
                connection 'scm:git:git://github.com/zonkyio/embedded-postgres-binaries.git'
                developerConnection 'scm:git:ssh://github.com:zonkyio/embedded-postgres-binaries.git'
                url 'https://github.com/zonkyio/embedded-postgres-binaries/tree/master'
            }

            licenses {
                license {
                    name 'The Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }

            developers {
                developer {
                    name 'Roman Pichlik'
                    email 'roman.pichlik@zonky.cz'
                }
                developer {
                    name 'Tomas Vanek'
                    email 'tomas.vanek@zonky.cz'
                }
                developer {
                    name 'Developers Zonky'
                    email 'developers@zonky.cz'
                }
            }
        }
    }
}

def normalizeArchName(String input) {
    String arch = input.toLowerCase(Locale.US).replaceAll('[^a-z0-9]+', '')

    if (arch ==~ /^(x8664|amd64|ia32e|em64t|x64)$/) {
        return 'x86_64'
    }
    if (arch ==~ /^(x8632|x86|i[3-6]86|ia32|x32)$/) {
        return 'x86_32'
    }
    if (arch ==~ /^(ia64w?|itanium64)$/) {
        return 'itanium_64'
    }
    if (arch == 'ia64n') {
        return 'itanium_32'
    }
    if (arch ==~ /^(sparcv9|sparc64)$/) {
        return 'sparc_64'
    }
    if (arch ==~ /^(sparc|sparc32)$/) {
        return 'sparc_32'
    }
    if (arch ==~ /^(aarch64|armv8|arm64).*$/) {
        return 'arm_64'
    }
    if (arch ==~ /^(arm|arm32).*$/) {
        return 'arm_32'
    }
    if (arch ==~ /^(mips|mips32)$/) {
        return 'mips_32'
    }
    if (arch ==~ /^(mipsel|mips32el)$/) {
        return 'mipsel_32'
    }
    if (arch == 'mips64') {
        return 'mips_64'
    }
    if (arch == 'mips64el') {
        return 'mipsel_64'
    }
    if (arch ==~ /^(ppc|ppc32)$/) {
        return 'ppc_32'
    }
    if (arch ==~ /^(ppcle|ppc32le)$/) {
        return 'ppcle_32'
    }
    if (arch == 'ppc64') {
        return 'ppc_64'
    }
    if (arch == 'ppc64le') {
        return 'ppcle_64'
    }
    if (arch == 's390') {
        return 's390_32'
    }
    if (arch == 's390x') {
        return 's390_64'
    }

    throw new GradleException("Unsupported architecture: $arch")
}